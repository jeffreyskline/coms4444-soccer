package g2;

import java.util.*;
import sim.Game;
import sim.GameHistory;
import sim.SimPrinter;

public class ConstraintExploit {

	
	public static int possibleGoals = 0;
	public static int neededGoals = 0;
	public static int excessGoals = 0;
	public static SimPrinter simPrinter = new SimPrinter(true);

	public static List<Integer> targetScan (Integer round, Integer teamID, GameHistory gameHistory) {

	    	List<Integer> targetTeams = new ArrayList<>();
		List<Integer> lastRoundScores = new ArrayList<>();
        	List<Integer> twoRoundsAgoScores = new ArrayList<>();
		Map<Integer,List<Game>> lastRoundGames = gameHistory.getAllGamesMap().get(round - 1);
        	Map<Integer,List<Game>> twoRoundsAgoGames = gameHistory.getAllGamesMap().get(round - 2);

		for(Map.Entry<Integer,List<Game>> entry : lastRoundGames.entrySet()){
			int opTeamID = entry.getKey();
			if (opTeamID != teamID){
			    simPrinter.println("TESTBEGIN");
			    for(Game game : entry.getValue()){
			        //simPrinter.println("Zero: " + game.getScoreAsString() +" "+ game.getNumPlayerGoals());
			        lastRoundScores.add(game.getNumPlayerGoals());
			    }
			    for(Game game : twoRoundsAgoGames.get(opTeamID)){
			        //simPrinter.println("One: " + game.getScoreAsString()+" "+game.getNumPlayerGoals());
			        twoRoundsAgoScores.add(game.getNumPlayerGoals());
			    }
			    if (lastRoundScores.equals(twoRoundsAgoScores)){
			        simPrinter.println("MATCH: " + opTeamID);
			        targetTeams.add(opTeamID);
			    }
			    lastRoundScores.clear();
			    twoRoundsAgoScores.clear();
			}
		}
		simPrinter.println(targetTeams);
		return targetTeams;
	}

	public static List<Game> generateTargetList (List<Integer> targetTeams, List<Game> finalList){

		int margin = 0;
		List<Game> targetList = new ArrayList<>();

		for (Game game : finalList){
			for (Integer targetID : targetTeams){
				if (game.getID().equals(targetID) && playerMargin(game) != 1){
					simPrinter.println("targetID: " + targetID + " gameID: " + game.getID() + " score: " + game.getScoreAsString());
					targetList.add(game);
				}
			}
		}
		return targetList;
	}

	public static void calculateGoalscape(List<Game> targetList){
		
		possibleGoals = 0;
		neededGoals = 0;
		excessGoals = 0;
		int margin = 0;

		for (Game game : targetList){
			margin = playerMargin(game);
			if (margin == 1)
				continue;
			else if (margin > 1)
				possibleGoals += Math.min(game.getHalfNumPlayerGoals(), margin - 1);
			else if (margin == 0){
				if (game.maxPlayerGoalsReached())
					possibleGoals += game.getHalfNumPlayerGoals();
				else
					neededGoals += 1;
			}
			else if (margin < 0){
				if (game.maxOpponentGoalsReached())
					neededGoals += (margin * -1); 
				else
					neededGoals += (margin * -1) + 1;
			}
		}

		simPrinter.println("POSSIBLE: " + possibleGoals + " NEEDED: " + neededGoals);

	}

	public static int playerMargin(Game game){
		return game.getNumPlayerGoals() - game.getNumOpponentGoals();
	}

	public static int opMargin(Game game){
		return game.getNumOpponentGoals() - game.getNumPlayerGoals();
	}

	public static void farmTargets(List<Game> targetList){
		int goals = 0; 
		for (Game game : targetList){
			if (playerMargin(game) > 1 || (game.maxPlayerGoalsReached() && playerMargin(game) == 0)){
				if (playerMargin(game) == 0)
					goals = game.getHalfNumPlayerGoals();
				else
					goals = Math.min (playerMargin(game) - 1, game.getHalfNumPlayerGoals());
				excessGoals += goals;
				neededGoals -= goals;
				possibleGoals -= goals;
				game.setNumPlayerGoals(game.getNumPlayerGoals() - goals);
			}
		}
		
		if (possibleGoals >= neededGoals  && possibleGoals != 0){
			for (Game game : targetList){
				if (playerMargin(game) < 1){
					excessGoals -= playerMargin(game) + 1;
					game.setNumPlayerGoals(game.getNumPlayerGoals() + playerMargin(game) + 1);
				}
			}
		}
	}

	public static void farmFinals(List<Game> finalList, int margin){
		int goals = 0;
		for (Game game : finalList){
			goals = 0;
			if (margin < 3 && playerMargin(game) < 2 && playerMargin(game) >= 0 && game.getNumPlayerGoals() > 6)
				goals = game.getHalfNumPlayerGoals();
			else if (playerMargin(game) == margin )
				goals = 1;
			if (neededGoals < goals)
				goals = neededGoals;
			if (goals != 0){
				game.setNumPlayerGoals(game.getNumPlayerGoals() - Math.min(game.getHalfNumPlayerGoals(), goals)); 
				neededGoals -= goals;
				excessGoals += goals;
				simPrinter.println(goals + " GOALS farmed from " + game.getID());
				simPrinter.println("POSSIBLE: " + possibleGoals + " NEEDED: " + neededGoals + " EXCESS: " + excessGoals);
					
			}
		}

	}




	public static void disributeExcess(List<Game> gameList){
		int goals = 0;
		while (excessGoals > 0){
			for (int i = 0; i < 10; i++){
				for (Game game : gameList){

					goals = 0;

					if (excessGoals == 0)
						break;

					else if (game.maxPlayerGoalsReached())
						continue;

					else if (i != 2){

						if (opMargin(game) == i)
							goals = Math.min(excessGoals, i + 1);

						else if (i > 2)
							if (playerMargin(game) == i - 2)
							goals = Math.min(excessGoals, i);
					}
					else if (i == 2){
						goals = 1;
					}
						
					excessGoals -= goals;
					game.setNumPlayerGoals(game.getNumPlayerGoals() + goals);
					simPrinter.println(goals + " GOALS ASSIGNED TO " + game.getID());
					simPrinter.println("POSSIBLE: " + possibleGoals + " NEEDED: " + neededGoals + " EXCESS: " + excessGoals);
					goals = 0;
					
				}
			}
		}
	}

	public static List<Game> targetedReallocation (List<Integer> targetTeams, List<Game> reallocatedPlayerGames){

		List<Game> finalList = new ArrayList<>(reallocatedPlayerGames);
		List<Game> targetList = new ArrayList<>(generateTargetList(targetTeams,finalList));

		for (Game game : targetList)
			simPrinter.println("Game " + game.getID() + ": " +game.getScoreAsString());

		calculateGoalscape(targetList);
		
		for (Game game : targetList)
			finalList.remove(game);
				
		for (Game game : finalList)
			simPrinter.println("FINAL LIST: " + game.getID() + " " + game.getScoreAsString());
		for (Game game : targetList)
			simPrinter.println("TARGET LIST: " + game.getID() + " " + game.getScoreAsString());

		simPrinter.println("POSSIBLE: " + possibleGoals + " NEEDED: " + neededGoals);
		excessGoals = 0;
		
		farmTargets(targetList);

			
		for (Game game : finalList)
			simPrinter.println("FINAL LIST: " + game.getID() + " " + game.getScoreAsString());
		for (Game game : targetList)
			simPrinter.println("TARGET LIST: " + game.getID() + " " + game.getScoreAsString());
		simPrinter.println("POSSIBLE: " + possibleGoals + " NEEDED: " + neededGoals + " EXCESS: " + excessGoals);

	
		if (possibleGoals < neededGoals){

			for (int i = 8; i >= 0; i--){
				farmFinals(finalList, i);
				simPrinter.println("final FARMED = EXCESS: " + excessGoals);
				disributeExcess(targetList);
				simPrinter.println("DIST " + i + " = " + " NEEDED: " + neededGoals + " EXCESS: " + excessGoals);	
			}
		
		}
			
				
/*
			simPrinter.println("FINAL FARM = NEEDED: " + neededGoals + " EXCESS: " + excessGoals);
			
			for (int i = 2; i > 0; i--){
				for (Game finalGame : finalList){
					margin =finalGame.getNumPlayerGoals() - finalGame.getNumOpponentGoals();
					if (margin > i && neededGoals > 0){
						excessGoals += 1;
						neededGoals -= 1;
						finalGame.setNumPlayerGoals(finalGame.getNumPlayerGoals() - 1);
					}
				}
		simPrinter.println("FARM MARGIN " + i + " = " + " NEEDED: " + neededGoals + " EXCESS: " + excessGoals);
				while (excessGoals > 0 && neededGoals > 0){
					simPrinter.println("DISTRIBUTING EXCESS: " + excessGoals);
					for (int j = 0; j < 9; j++){
						for (Game targetGame : targetList){
							if (excessGoals == 0)
								break;
							if (targetGame.maxPlayerGoalsReached())
								continue;
							opMargin = targetGame.getNumOpponentGoals() - targetGame.getNumPlayerGoals();

							//draws first
							if (opMargin == 0){
								excessGoals -= 1;
								targetGame.setNumPlayerGoals(targetGame.getNumPlayerGoals() + 1);
								neededGoals -= 1;
								continue;
							}
							//the rest after 
							if (opMargin == j){
								if (excessGoals >= j + 1){
									excessGoals -= j + 1;
									neededGoals -= j + 1;
									if (targetGame.maxOpponentGoalsReached())
										targetGame.setNumPlayerGoals(targetGame.getNumPlayerGoals() + 1);
									else
										targetGame.setNumPlayerGoals(targetGame.getNumPlayerGoals() + j + 1);
								}
								else{
									targetGame.setNumPlayerGoals(targetGame.getNumPlayerGoals() + excessGoals);
									neededGoals -= excessGoals;
									excessGoals = 0;
								}
							}
						}
					}
				}
				simPrinter.println("FARM DIST " + i + " = " + " NEEDED: " + neededGoals + " EXCESS: " + excessGoals);
			}

			while (excessGoals > 0){
				simPrinter.println("DISTRIBUTING EXCESS TO FINAL: " + excessGoals);
				for (int j = 0; j < 9; j++){
					for (Game game : finalList){
						if (excessGoals == 0)
							break;
						if (game.maxPlayerGoalsReached())
							continue;
						opMargin = game.getNumOpponentGoals() - game.getNumPlayerGoals();

						//draws first
						if (opMargin == j){
							int points = 0;
							if (opMargin == 0)
								points = 1;
							else if (opMargin == 1 )
								if (excessGoals >= j + 1)
									excessGoals += 1;
						}
						//try to take losses to wins first
						else if (opMargin == j){
							if (excessGoals >= j + 1){
								excessGoals -= j + 1;
								game.setNumPlayerGoals(game.getNumPlayerGoals() + j + 1);
							}

						}
						//increase win margins next
						else if (opMargin == -j){
							if (excessGoals > 0){
								excessGoals -= 1;
								game.setNumPlayerGoals(game.getNumPlayerGoals() + 1);
							}
							else{
									game.setNumPlayerGoals(game.getNumPlayerGoals() + excessGoals);
									neededGoals -= excessGoals;
									excessGoals = 0;
							}
						}
					}
				}
			}
		}
		for (Game game : finalList)
			simPrinter.println("FINAL LIST: " + game.getID() + " " + game.getScoreAsString());
		for (Game game : targetList)
			simPrinter.println("TARGET LIST: " + game.getID() + " " + game.getScoreAsString());

		simPrinter.println("POSSIBLE: " + possibleGoals + " NEEDED: " + neededGoals + " EXCESS: " + excessGoals);

		for(Game game : targetList)
			finalList.add(game);
	 
		if(checkConstraintsSatisfied(playerGames, finalList)) {
			simPrinter.println("CONSTRAINS G2G: " + round);
			return finalList;
		}

		simPrinter.println(checkConstraintsSatisfied2(playerGames, finalList));

		for (Game game : playerGames){
			simPrinter.println("Game " + game.getID() + ": " +game.getScoreAsString());
			for (Game fgame : finalList)
				if(fgame.getID() == game.getID())
					simPrinter.println("Change: " + fgame.getScoreAsString() + "\n");
		}

		simPrinter.println("returning unchanged");
		return playerGames;
	}
			
		*/	
			disributeExcess(finalList);
			for (Game game : targetList)
				finalList.add(game);

			return finalList;
	}
}
